{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/frontend/js/app.js","app/frontend/js/autoforms.js","app/frontend/js/headerScroll.js","app/frontend/js/popupOpen.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","autoforms","popupOpen","scroll","autoformListNode","document","querySelectorAll","Array","prototype","slice","forEach","form","init","Validators","maskphone","keys","errorMessage","validatorFunction","field","valid","nodeLink","value","indexOf","keypressValidatorFunction","ErrorMessage","_classCallCheck","this","empty","message","concat","dataset","name","type","autoFormLink","options","factory","AUTOFORM_FIELD_INVALID_CLASS","AUTOFORM_FORM_INVALID_CLASS","AUTOFORM_SUBMIT_INVALID_CLASS","AUTOFORM_HOVERED_ONCE","AUTOFORM_KEYERROR_WRAP_CLASS","AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS","HTML5_INPUT_TYPES","Field","node","autoForm","currentField","autoformField","dataOpts","fieldType","attributes","addFieldActions","checkString","allowAllSymbols","additionalValidation","addEventListener","updateState","classList","remove","evt","keyCode","submit","disabled","tagName","click","split","map","_char","charCodeAt","join","search","which","preventDefault","PositiveValidation","validate","add","LeaveUnvalidHighlights","contains","callFromGroup","self","required","undefined","errorString","group","validateGroupWithOperator","groupValidateOperator","AutoForm","htmlElementNode","key","thisAutoForm","errorStack","validationErrors","emptyErrors","emptyCheckboxes","text","password","text-all","text-url","url","date","phone","radio","checkedVals","querySelector","getAttribute","select","email","test","checkbox","checked","number","email-phone","ShowErrorMsg","PrettyPrintErrors","EnableAnimations","DeactivateSubmit","FormInvalidClass","CancelButton","CancelErrorMsg","hasOwnProperty","updateFields","MutationObserver","mutations","update","mutation","target","observe","childList","characterData","subtree","error","addToStack","err","push","id","fields","thisNodeId","_iterator","_createForOfIteratorHelper","fieldTypeHTML","s","_step","done","groupName","filter","operator","getFieldsByGroup","groupValid","clearErrors","_iterator2","_step2","pushError","innerHTML","parentElement","removeAttribute","console","log","setAttribute","parentNode","highlightInvalidFields","getElementById","style","opacity","opts","_iterator3","_step3","widgets","newElementName","className","toLowerCase","replace","RegExp","autoform","initEvents","define","amd","_typeof","returnExports","header","DEFAULT_HEIGHT","offsetHeight","window","pageYOffset","height","openPopupButtonElement","closePopupButtonElement","closePopup","BODY_OVERFLOW_CLASS","popupElement","body","removeEventListener"],"mappings":"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","file":"script.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\r\n\r\n// ПОДКЛЮЧЕНИЕ\r\n\r\n// автоформы\r\nconst autoforms = require(\"./autoforms\");\r\n\r\n// попапы\r\nconst popupOpen = require(\"./popupOpen\");\r\n\r\n// Скролл шапки\r\n\r\nconst scroll = require(\"./headerScroll\");\r\n\r\nscroll();\r\n\r\n\r\n// НАСТРОЙКИ\r\n\r\n// Мобильное меню\r\n// mobileMenu ({\r\n//   btnOpenTag: \".js-btn-mobile-menu-open\",\r\n//   btnCloseTag: \".js-btn-mobile-menu-close\",\r\n//   linkCloseTag: \".js-mobile-menu-link\"\r\n// });\r\n\r\n\r\n// Обрабатываем телефон\r\n// let telListNode = document.querySelectorAll(\".js-tel\");\r\n// var telList = Array.prototype.slice.call(telListNode, 0);\r\n// telList.forEach(function(telInp) {\r\n//   maskedInput(telInp).mask(\"+7 (999) 999-99-99\");\r\n// });\r\n\r\n// Автоформы\r\nlet autoformListNode = document.querySelectorAll(\".js-form\");\r\nvar autoformList = Array.prototype.slice.call(autoformListNode, 0);\r\n\r\nautoformList.forEach(function(form)  {\r\n  autoforms.init(form, {\r\n      Validators: {\r\n        \"maskphone\": {\r\n          \"keys\": \"1234567890\",\r\n          \"errorMessage\": \"Type only numbers\",\r\n          \"validatorFunction\": function validatorFunction(field) {\r\n            return field.valid = field.nodeLink.value.indexOf(\"_\") < 0;\r\n          },\r\n          \"keypressValidatorFunction\": false\r\n        }\r\n      }\r\n  });\r\n\r\n});\r\n\r\n// отправка форм по аякс\r\n// forms(\".js-form\");\r\n\r\n//Открытие меню\r\npopupOpen();\r\n\r\n\r\n// раскрывающийся список\r\n// expandListStep({\r\n//   rootTag: \".js-expand-list-step\",\r\n//   itemTag: \".js-expand-item\",\r\n//   numberDisplay: true,\r\n//   numberDisplayItem: \"5\",\r\n//   readMoreTag: \".js-read-more\",\r\n//   displayItemIndicator: false,\r\n//   delay: 30,\r\n//   animationClass: \"is-appear\",\r\n//   noClose: true\r\n// });\r\n\r\n//добавление файла\r\n// inputFileNew();\r\n\r\n// // Аккордеон на сервисе\r\n// simpleAccord({\r\n//   rootTag: \".js-accordeon\",\r\n//   itemTag: \".js-table-row\",\r\n//   toggleTag: \".js-toggle\",\r\n//   scroll: false\r\n// });\r\n\r\n// // читать еще N отзывов\r\n// readMoreGroup({\r\n//   rootTag: \".js-readMoreGroup\",\r\n//   itemTag: \".js-review-item\",\r\n//   moreBtnTag: \".js-readMoreGroup-btn\",\r\n//   step: 4,\r\n//   stepIndicator: \".js-readMoreGroup-step\",\r\n//   scroll: false\r\n// });\r\n\r\n// // Попап формы отзывов\r\n// popupSimple({\r\n//     openTag: \".js-open-spopup\",\r\n//     closeTag: \".js-close-spopup\",\r\n//     bodyClass: \"is-form-rewiev-open\"\r\n// });\r\n\r\n// // Попап согласия\r\n// popupSimple({\r\n//     openTag: \".js-open-person\",\r\n//     closeTag: \".js-close-person\",\r\n//     bodyClass: \"is-popup-person-open\"\r\n// });\r\n\r\n// // попапы отзывов\r\n// popupReview({\r\n//     itemTag: \".js-review-item\",\r\n//     btnTag: \".js-review-open\",\r\n//     closeTag: \".js-review-close\",\r\n//     bodyClass: \"is-popup-review-open\"\r\n// });\r\n\r\n// // попапы футера\r\n// popupReview({\r\n//     itemTag: \".js-footer-item\",\r\n//     btnTag: \".js-footer-open\",\r\n//     closeTag: \".js-footer-close\",\r\n//     bodyClass: \"is-popup-footer-open\"\r\n// });\r\n\r\n// // липкое меню\r\n// stickyMenu({\r\n//     rootTag: \".js-sticky-menu\",\r\n//     itemTag: \".js-sticky-item\",\r\n//     duration: 50,\r\n//     speed: 1000,\r\n//     ofset: 30,\r\n//     noParentOfsetLessWhen: 1150,\r\n//     doWrapper: false,\r\n//     doStickyWithJS: false\r\n// });\r\n\r\n\r\n// // слайдер\r\n// slider({\r\n//   rootTag: \".js-intro-slider-mobile\",\r\n//   slideItemTag: \".js-inner > *\",\r\n//   prev: \".js-prev\",\r\n//   next: \".js-next\",\r\n//   controls: \".js-controls > *\",\r\n//   interval: \"\"\r\n// });\r\n\r\n// swiperInit();\r\n// var swiper = new Swiper('.swiper-container', {\r\n//   slidesPerView: 1,\r\n//   spaceBetween: 0,\r\n//   loop: true,\r\n//   // autoplay: {\r\n//   //     delay: 5000\r\n//   // },\r\n//   pagination: {\r\n//       el: '.swiper-pagination',\r\n//       clickable: true,\r\n//   }\r\n// });\r\n","/*\r\n *     Copyright (c) 2016. Dmitriy Gajewski\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n\"use strict\";\r\n\r\nconst AUTOFORM_FIELD_INVALID_CLASS = \"autoform-invalid\";\r\nconst AUTOFORM_FORM_INVALID_CLASS = \"autoform-form-invalid\";\r\nconst AUTOFORM_SUBMIT_INVALID_CLASS = \"autoform-submit-invalid\";\r\nconst AUTOFORM_HOVERED_ONCE = \"autoform-submit-hovered-once\";\r\nconst AUTOFORM_KEYERROR_WRAP_CLASS = \"autoforms_errors\";\r\nconst AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS = \"autoforms_errors\";\r\nconst HTML5_INPUT_TYPES = [\"text\", \"password\", \"checkbox\", \"radio\", \"number\", \"color\", \"date\", \"datetime\", \"datetime-local\", \"email\", \"range\", \"search\", \"tel\", \"time\", \"url\", \"month\", \"week\"];\r\n\r\nconst E_VALIDATION = 100;\r\nconst E_EMPTY = 101;\r\nconst E_EMPTY_CHECKBOX = 102;\r\n\r\nclass ErrorMessage {\r\n    constructor(field) {\r\n        if (!field.empty) {\r\n            this.message = field.autoFormLink.options.Validators[field.type].errorMessage + \" \" + (field.nodeLink.dataset.name || field.nodeLink.name);\r\n            if (field.type !== \"checkbox\") {\r\n                this.type = E_VALIDATION;\r\n            } else {\r\n                this.type = E_EMPTY_CHECKBOX;\r\n            }\r\n        } else {\r\n            this.message = `${field.nodeLink.dataset.name || field.nodeLink.name} is empty`;\r\n            this.type = E_EMPTY;\r\n        }\r\n        this.field = field;\r\n    }\r\n}\r\n\r\nclass Field {\r\n    /**\r\n     * Field class describes single field.\r\n     * @param node\r\n     * @param autoForm\r\n     */\r\n\r\n    constructor(node, autoForm) {\r\n        let currentField = this;\r\n        currentField.nodeLink = node;\r\n        node.autoformField = currentField;\r\n        currentField.dataOpts = node.dataset;\r\n        currentField.type = currentField.dataOpts.fieldType || (currentField.nodeLink.attributes.type ? currentField.nodeLink.attributes.type.value : \"text\");\r\n        currentField.empty = false;\r\n        currentField.valid = false;\r\n        currentField.autoFormLink = autoForm;\r\n        currentField.addFieldActions();\r\n    }\r\n\r\n    /**\r\n     * Method adds event listeners to field\r\n     */\r\n    addFieldActions() {\r\n        let currentField = this;\r\n        let allowAllSymbols = false,\r\n            checkString,\r\n            additionalValidation = true;\r\n\r\n        currentField.nodeLink.addEventListener(\"keyup\", () => currentField.autoFormLink.updateState());\r\n        currentField.nodeLink.addEventListener(\"change\", () => currentField.autoFormLink.updateState());\r\n        currentField.nodeLink.addEventListener(\"click\", function () {\r\n            currentField.autoFormLink.updateState();\r\n            this.classList.remove(AUTOFORM_FIELD_INVALID_CLASS);\r\n        });\r\n        currentField.nodeLink.addEventListener(\"keypress\", function (evt) {\r\n            if ((evt.keyCode === 13) && (currentField.autoFormLink.submit.attributes.disabled !== \"disabled\") && (this.tagName !== \"TEXTAREA\")) {\r\n                currentField.autoFormLink.submit.click();\r\n            }\r\n\r\n            if (currentField.autoFormLink.options.Validators[currentField.type].keypressValidatorFunction) {\r\n                additionalValidation = currentField.autoFormLink.options.Validators[currentField.type].keypressValidatorFunction(currentField);\r\n            }\r\n            if (currentField.autoFormLink.options.Validators[currentField.type].keys) {\r\n                checkString = currentField.autoFormLink.options.Validators[currentField.type].keys.split(\"\").map(\r\n                    function(char){\r\n                        return char.charCodeAt();\r\n                    }).join(\" \") + \" 8 9 10 13\";\r\n            } else {\r\n                allowAllSymbols = true;\r\n            }\r\n\r\n            if (additionalValidation && (!allowAllSymbols) && (checkString.search(evt.which) === -1)) {\r\n                evt.preventDefault();\r\n                return false;\r\n                //TODO: add popup keyerror messages\r\n            }\r\n        });\r\n\r\n        if (currentField.autoFormLink.options.PositiveValidation) {\r\n            currentField.nodeLink.addEventListener(\"focusout\", function () {\r\n                if (currentField.validate()) {\r\n                    currentField.nodeLink.classList.add(\"valid\");\r\n                    currentField.nodeLink.classList.remove(AUTOFORM_FIELD_INVALID_CLASS);\r\n                } else {\r\n                    if (currentField.autoFormLink.options.LeaveUnvalidHighlights && currentField.autoFormLink.nodeLink.classList.contains(AUTOFORM_HOVERED_ONCE)) {\r\n                        currentField.nodeLink.classList.add(AUTOFORM_FIELD_INVALID_CLASS);\r\n                    }\r\n                }\r\n            });\r\n            currentField.nodeLink.addEventListener(\"focusin\", function(){\r\n                currentField.nodeLink.classList.remove(\"valid\");\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method validates single field\r\n     * @param callFromGroup if called from group validator\r\n     * @returns {boolean|*}\r\n     */\r\n    validate(callFromGroup) {\r\n        let self = this;\r\n        self.empty = self.nodeLink.value === \"\";\r\n        if (!self.empty ) { // if field is not empty\r\n            if (self.autoFormLink.options.Validators[self.type]) {\r\n                if (self.autoFormLink.options.Validators[self.type].validatorFunction) {\r\n                    self.valid = self.autoFormLink.options.Validators[self.type].validatorFunction(self);\r\n                } else {\r\n                    self.valid = true;\r\n                }\r\n            } else {\r\n                self.valid = true;\r\n            }\r\n        }\r\n        else {\r\n            if ((self.dataOpts.required !== true) && (self.dataOpts.required !== undefined)) {\r\n                self.valid = true;\r\n            }\r\n            else {\r\n                self.autoFormLink.errorString = \"Fill up required fields\";\r\n                self.valid = false;\r\n            }\r\n        }\r\n        if (self.dataOpts.group && !callFromGroup) {\r\n            self.valid = self.autoFormLink.validateGroupWithOperator(self.dataOpts.group, self.dataOpts.groupValidateOperator);\r\n        }\r\n        return self.valid;\r\n    };\r\n}\r\n\r\n/**\r\n * AutoForm class constructor. Accepts html node as first argument (usually form element, but can be any of its parents too)\r\n * @param htmlElementNode\r\n * @param options\r\n * @constructor\r\n */\r\n\r\nclass AutoForm {\r\n    constructor(htmlElementNode, options) {\r\n        let thisAutoForm = this;\r\n\r\n        this.errorStack = {\r\n            validationErrors: [],\r\n            emptyErrors: [],\r\n            emptyCheckboxes: []\r\n        };\r\n        this.options = {\r\n            Validators: {\r\n                \"text\": {\r\n                    \"keys\": \"\",\r\n                    \"errorMessage\": \"Field is empty\",\r\n                    \"validatorFunction\": false,\r\n                    \"keypressValidatorFunction\": false\r\n                },\r\n                \"password\": {\r\n                    \"keys\": \"\",\r\n                    \"errorMessage\": \"Field is empty\",\r\n                    \"validatorFunction\": false,\r\n                    \"keypressValidatorFunction\": false\r\n                },\r\n                \"text-all\": {\r\n                    \"keys\": \"\",\r\n                    \"errorMessage\": \"Field is empty\",\r\n                    \"validatorFunction\": false,\r\n                    \"keypressValidatorFunction\": false\r\n                },\r\n                \"text-url\": {\r\n                    \"keys\": \"1234567890-=_+qwertyuiop[]asdfghjkl;\\\"zxcvbnm,./QWERTYUIOP{}|ASDFGHJKL:ZXCVBNM<>?\",\r\n                    \"errorMessage\": \"Type only latin\",\r\n                    \"validatorFunction\": false,\r\n                    \"keypressValidatorFunction\": false\r\n                },\r\n                \"url\": {\r\n                    \"keys\": \"1234567890-=_+qwertyuiop[]asdfghjkl;\\\"zxcvbnm,./QWERTYUIOP{}|ASDFGHJKL:ZXCVBNM<>?\",\r\n                    \"errorMessage\": \"Type only latin\",\r\n                    \"validatorFunction\": false,\r\n                    \"keypressValidatorFunction\": false\r\n                },\r\n                \"date\": {\r\n                    \"keys\": \"/.1234567890\",\r\n                    \"errorMessage\": \"Type only numbers and delimiters\",\r\n                    \"validatorFunction\": false,\r\n                    \"keypressValidatorFunction\": function (field) {\r\n                        return (field.nodeLink.value.length < 10);\r\n                    }\r\n                },\r\n                \"phone\": {\r\n                    \"keys\": \"()+-0123456789()-\",\r\n                    \"errorMessage\": \"Type only numbers\",\r\n                    \"validatorFunction\": false,\r\n                    \"keypressValidatorFunction\": false\r\n                },\r\n                \"radio\": {\r\n                    \"keys\": \"\",\r\n                    \"errorMessage\": \"Please check one of radiobuttons\",\r\n                    \"validatorFunction\": function validatorFunction(field) {\r\n                        let checkedVals = field.autoFormLink.nodeLink.querySelector(`input[name=\"${field.nodeLink.getAttribute(\"name\")}\"]:checked`);\r\n                        return checkedVals ? (checkedVals.value !== undefined || !field.dataOpts.required) : false;\r\n                    },\r\n                    \"keypressValidatorFunction\": false\r\n                },\r\n                \"select\": {\r\n                    \"keys\": \"\",\r\n                    \"errorMessage\": \"Select an element in dropdown\",\r\n                    \"validatorFunction\": false,\r\n                    \"keypressValidatorFunction\": false\r\n                },\r\n                \"email\": {\r\n                    \"keys\": \"0123456789.@qwertyuiopasdfghjklzxcvbnm-QWERTYUIOPASDFGHJKLZXCVBNM_\",\r\n                    \"errorMessage\": \"Email is not valid\",\r\n                    \"validatorFunction\": function (field) {\r\n                        return (/\\S+\\@\\S+\\.[a-z]+/i).test(field.nodeLink.value);\r\n                    },\r\n                    \"keypressValidatorFunction\": false\r\n                },\r\n                \"checkbox\": {\r\n                    \"keys\": \"\",\r\n                    \"errorMessage\": \"Please select checkbox\",\r\n                    \"validatorFunction\": function validatorFunction(field) {\r\n                        if (field.nodeLink.checked) {\r\n                            return true;\r\n                        }\r\n                        return typeof field.dataOpts.required !== \"undefined\";\r\n                    },\r\n                    \"keypressValidatorFunction\": false\r\n                },\r\n                \"number\": {\r\n                    \"keys\": \"0123456789\",\r\n                    \"errorMessage\": \"Type only numbers\",\r\n                    \"validatorFunction\": false,\r\n                    \"keypressValidatorFunction\": false\r\n                },\r\n                \"email-phone\": {\r\n                    \"keys\": \"0123456789.@qwertyuiopasdfghjklzxcvbnm-+QWERTYUIOPASDFGHJKLZXCVBNM_()\",\r\n                    \"errorMessage\": \"Type only numbers\",\r\n                    \"validatorFunction\": function (field) {\r\n                        if ((/^[+0-9]{1}[(0-9]{2}[0-9]{2}[)0-9]{2}[0-9]{4,7}$/).test(field.nodeLink.value)) {\r\n                            return (/^[+0-9]{1}[(0-9]{2}[0-9]{2}[)0-9]{2}[0-9]{4,7}$/).test(field.nodeLink.value)\r\n                        } else {\r\n                            return (/\\S+\\@\\S+\\.[a-z]+/i).test(field.nodeLink.value);\r\n                        }\r\n                    },\r\n                    \"keypressValidatorFunction\": false\r\n                },\r\n            },\r\n            ShowErrorMsg: options.ShowErrorMsg || false,\r\n            PrettyPrintErrors: options.PrettyPrintErrors || true,\r\n            EnableAnimations: options.EnableAnimations || true,\r\n            DeactivateSubmit: options.DeactivateSubmit || true,\r\n            FormInvalidClass: options.FormInvalidClass || true,\r\n            // InvalidKeyErrorMsg: options.InvalidKeyErrorMsg || true,\r\n            // InvalidKeyTimeout: options.InvalidKeyTimeout || 1000,\r\n            // TODO: return this options when keypress errors will be complete\r\n            CancelButton: options.CancelButton || \".cancel\",\r\n            CancelErrorMsg: options.CancelErrorMsg || false,\r\n            PositiveValidation: options.PositiveValidation || true,\r\n            LeaveUnvalidHighlights: options.LeaveUnvalidHighlights || false\r\n        };\r\n        for (let key in options.Validators) {\r\n            if (options.Validators.hasOwnProperty(key)) {\r\n                this.options.Validators[key] = options.Validators[key];\r\n            }\r\n        }\r\n        this.valid = false;\r\n        this.nodeLink = htmlElementNode;\r\n        this.updateFields();\r\n        if (MutationObserver) {\r\n            let observer = new MutationObserver(function(mutations) {\r\n                let update = false;\r\n                mutations.forEach(function(mutation) {\r\n                    if (mutation.type === \"childList\" && mutation.target.classList[0] !== AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS) {\r\n                        update = true;\r\n                        // console.log(mutation);\r\n                    }\r\n                });\r\n\r\n                if (update) {\r\n                    thisAutoForm.updateFields();\r\n                }\r\n            });\r\n\r\n            observer.observe(htmlElementNode, {\r\n                attributes: true,\r\n                childList: true,\r\n                characterData: true,\r\n                subtree: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Push error to error stack\r\n     * @param error\r\n     */\r\n    pushError(error) {\r\n        let addToStack = true;\r\n        this.errorStack.emptyErrors.concat(this.errorStack.validationErrors.concat(this.errorStack.emptyCheckboxes)).forEach(function(err) {\r\n            if (error.message === err.message) {\r\n                addToStack = false;\r\n            }\r\n        });\r\n        if (addToStack) {\r\n            switch (error.type) {\r\n                case E_EMPTY: {\r\n                    this.errorStack.emptyErrors.push(error);\r\n                } break;\r\n                case E_EMPTY_CHECKBOX: {\r\n                    this.errorStack.emptyCheckboxes.push(error);\r\n                } break;\r\n                case E_VALIDATION: {\r\n                    this.errorStack.validationErrors.push(error);\r\n                } break;\r\n                default: {\r\n                    this.errorStack.emptyErrors.push(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear error stack\r\n     */\r\n    clearErrors() {\r\n        this.errorStack.emptyErrors = [];\r\n        this.errorStack.validationErrors = [];\r\n        this.errorStack.emptyCheckboxes = [];\r\n    }\r\n\r\n    /**\r\n     * updates fields list in object (you can call this method to update fields if form changed)\r\n     */\r\n    updateFields() {\r\n        let thisAutoForm = this;\r\n\r\n        this.submit = this.nodeLink.querySelector(\"input[type=\\\"submit\\\"]\") ||\r\n                      this.nodeLink.querySelector(\"button[type=\\\"submit\\\"]\") ||\r\n                      document.querySelector(`input[form=\"${this.nodeLink.id}\"]`) ||\r\n                      document.querySelector(`button[form=\"${this.nodeLink.id}\"]`) ||\r\n                      this.nodeLink.querySelector(\"button\");\r\n\r\n\r\n        this.fields = [];\r\n        let thisNodeId = this.nodeLink.id;\r\n        let fields = this.nodeLink.querySelectorAll(\r\n            (HTML5_INPUT_TYPES.map(function (fieldTypeHTML) {\r\n                return `input[type=\"${fieldTypeHTML}\"], input[type=\"${fieldTypeHTML}\"][form=\"${thisNodeId}\"]`;\r\n            }).join(\", \")) +\r\n            \", select, \" +\r\n            \"textarea, \" +\r\n            `select[form=\"${this.nodeLink.id}\"]`);\r\n\r\n        for (let field of fields) {\r\n            this.fields.push(new Field(field, thisAutoForm));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * returns array of fields filtered by group\r\n     * @param groupName\r\n     * @returns {Array.<*>}\r\n     */\r\n    getFieldsByGroup(groupName) {\r\n        let thisAutoForm = this;\r\n        return thisAutoForm.fields.filter(function (field) {\r\n            return field.dataOpts.group === groupName;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Validate fields grouped by data-group attribute\r\n     * @param groupName\r\n     * @param operator validation operator (currently \"or\" or \"and\")\r\n     * @returns {boolean}\r\n     */\r\n    validateGroupWithOperator(groupName, operator) {\r\n        let thisAutoForm = this,\r\n            fields = thisAutoForm.getFieldsByGroup(groupName),\r\n            groupValid = false;\r\n        switch (operator) {\r\n            case \"or\": {\r\n                fields.forEach(function (field) {\r\n                    if (field.validate(true)) {\r\n                        groupValid = true;\r\n                    }\r\n                });\r\n            } break;\r\n            case \"and\": {\r\n                groupValid = true;\r\n                fields.forEach(function (field) {\r\n                    if (!field.validate(true)) {\r\n                        groupValid = false;\r\n                    }\r\n                });\r\n            } break;\r\n            default: {\r\n                groupValid = true;\r\n                fields.forEach(function (field) {\r\n                    if (!field.validate(true)) {\r\n                        groupValid = false;\r\n                    }\r\n                });\r\n            } break;\r\n        }\r\n\r\n        return groupValid;\r\n    }\r\n\r\n    /**\r\n     * Checks all fields of form. If at least one field is not valid (validate() method returns false) returns false\r\n     * @returns {boolean}\r\n     */\r\n    validate() {\r\n        let self = this;\r\n        self.clearErrors();\r\n        self.valid = true;\r\n        for (let field of self.fields) {\r\n            if (!field.validate()) {\r\n                self.valid = false;\r\n                self.pushError(new ErrorMessage(field));\r\n            }\r\n        }\r\n        return self.valid;\r\n    };\r\n\r\n    /**\r\n     * This method run actions that changes form states\r\n     */\r\n    updateState() {\r\n        let self = this;\r\n        if (self.validate()) {\r\n            try {\r\n                self.nodeLink.querySelector(`.${AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS}`).innerHTML = \"\";\r\n                if (self.options.FormInvalidClass) {\r\n                    self.nodeLink.classList.remove(AUTOFORM_FORM_INVALID_CLASS);\r\n                }\r\n                if (self.options.DeactivateSubmit) {\r\n                    self.submit.parentElement.classList.remove(AUTOFORM_SUBMIT_INVALID_CLASS);\r\n                    self.submit.removeAttribute(\"disabled\");\r\n                }\r\n            } catch (e) {\r\n                console.log(`(Error) in autoforms: ${e.message}`);\r\n            }\r\n        }\r\n        else {\r\n            if (self.options.PrettyPrintErrors) {\r\n                try {\r\n                    self.nodeLink.querySelector(`.${AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS}`).innerHTML =\r\n                        `${(function () {\r\n                            if (self.errorStack.emptyErrors.length > 0) {\r\n                                return `<div class=\"empty-errors\">\r\n                                            <div class=\"title\">The following fields is empty:</div>\r\n                                            <div class=\"error-list\">\r\n                                                ${self.errorStack.emptyErrors.map(function (err) {\r\n                                    return `<span class=\"error-message\">${err.field.dataOpts.name || err.field.nodeLink.name }</span>`;\r\n                                }).join(\"\")}\r\n                                            </div>\r\n                                         </div>`;\r\n                            } else {\r\n                                return \"\";\r\n                            }\r\n                        })()}\r\n                    ${(function () {\r\n                            if (self.errorStack.validationErrors.length > 0) {\r\n                                return `<div class=\"validation-errors\">\r\n                                        <div class=\"title\">Check the correctness of the fields:</div>\r\n                                        <div class=\"error-list\">\r\n                                            ${self.errorStack.validationErrors.map(function (err) {\r\n                                    return `<span class=\"error-message\">${err.field.dataOpts.name || err.field.nodeLink.name}</span>`;\r\n                                }).join(\"\")}\r\n                                        </div>\r\n                                     </div>`;\r\n                            } else {\r\n                                return \"\";\r\n                            }\r\n                        })()}\r\n                    ${(function () {\r\n                            if (self.errorStack.emptyCheckboxes.length > 0) {\r\n                                return `<div class=\"empty-checkboxes-errors\">\r\n                                        <div class=\"title\">Check the checkboxes:</div>\r\n                                        <div class=\"error-list\">\r\n                                            ${self.errorStack.emptyCheckboxes.map(function (err) {\r\n                                    return `<span class=\"error-message\">${err.field.dataOpts.name || err.field.nodeLink.name}</span>`;\r\n                                }).join(\"\")}\r\n                                        </div>\r\n                                     </div>`;\r\n                            } else {\r\n                                return \"\";\r\n                            }\r\n                        })()}`;\r\n                } catch (e) {\r\n                    console.log(`(Error) in autoforms: ${e.message}`);\r\n                }\r\n            } else {\r\n                try {\r\n                    self.nodeLink.querySelector(`.${AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS}`).innerHTML = self.errorStack.emptyErrors.concat(self.errorStack.validationErrors.concat(self.errorStack.emptyCheckboxes)).map(function (err) {\r\n                        return `<span class=\"error-message\">${err.message}</span><br>`;\r\n                    }).join(\"\");\r\n                } catch (e) {\r\n                    console.log(`(Error) in autoforms: ${e.message}`);\r\n                }\r\n            }\r\n            if (self.options.FormInvalidClass) {\r\n                self.nodeLink.classList.add(AUTOFORM_FORM_INVALID_CLASS);\r\n            }\r\n            if (self.options.DeactivateSubmit) {\r\n                self.submit.parentElement.classList.add(AUTOFORM_SUBMIT_INVALID_CLASS);\r\n                self.submit.setAttribute(\"disabled\", \"disabled\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * This method inits all events of form including field events and submit hover events\r\n     */\r\n    initEvents() {\r\n        let self = this;\r\n\r\n        self.submit.parentNode.addEventListener(\"mouseenter\", function () {\r\n            self.highlightInvalidFields(\"on\");\r\n            if (!self.nodeLink.classList.contains(AUTOFORM_HOVERED_ONCE)) {\r\n                self.nodeLink.classList.add(AUTOFORM_HOVERED_ONCE);\r\n            }\r\n        });\r\n        self.submit.parentNode.addEventListener(\"mouseleave\", function () {\r\n            if (!self.options.LeaveUnvalidHighlights) {\r\n                self.highlightInvalidFields(\"off\");\r\n            }\r\n            /*if (self.valid) {\r\n            }*/\r\n            if (self.options.ShowErrorMsg) {\r\n                if (self.options.EnableAnimations) {\r\n                    self.nodeLink.getElementById(AUTOFORM_KEYERROR_WRAP_CLASS).style.opacity = 0;\r\n                }\r\n                else {\r\n                    self.nodeLink.getElementById(AUTOFORM_KEYERROR_WRAP_CLASS).innerHTML = \"\";\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n\r\n        if (self.valid) {\r\n            if (self.options.FormInvalidClass) {\r\n                self.nodeLink.classList.remove(AUTOFORM_FORM_INVALID_CLASS);\r\n            }\r\n            if (self.options.DeactivateSubmit) {\r\n                self.submit.parentNode.classList.remove(AUTOFORM_SUBMIT_INVALID_CLASS);\r\n                if (self.submit.attributes.disabled) {\r\n                    self.submit.removeAttribute(\"disabled\");\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            if (self.options.FormInvalidClass) {\r\n                self.nodeLink.classList.remove(AUTOFORM_FORM_INVALID_CLASS);\r\n            }\r\n            if (self.options.DeactivateSubmit) {\r\n                self.submit.parentNode.classList.add(AUTOFORM_SUBMIT_INVALID_CLASS);\r\n                self.submit.setAttribute(\"disabled\", \"disabled\");\r\n            }\r\n        }\r\n\r\n        if (self.options.CancelErrorMsg) {\r\n            document.querySelector(self.options.CancelButton).addEventListener(\"mouseenter\", function () {\r\n                self.errorString = \"Будут отменены все изменения!\";\r\n            });\r\n            document.querySelector(self.options.CancelButton).addEventListener(\"mouseleave\", function () {\r\n                self.errorString = \"\";\r\n                if (self.options.EnableAnimations) {\r\n                    document.getElementById(AUTOFORM_KEYERROR_WRAP_CLASS).style.opacity = 0;\r\n                }\r\n                else {\r\n                    document.getElementById(AUTOFORM_KEYERROR_WRAP_CLASS).innerHTML = \"\";\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method just highlighting invalid fields.\r\n     * @param opts (off|on) off - removes highlight class from fields\r\n     */\r\n    highlightInvalidFields(opts) {\r\n        let self = this;\r\n        for (let field of self.fields) {\r\n            if (opts !== \"off\") {\r\n                if (field.validate()) {\r\n                    field.nodeLink.classList.remove(AUTOFORM_FIELD_INVALID_CLASS);\r\n                }\r\n                else {\r\n                    field.nodeLink.classList.add(AUTOFORM_FIELD_INVALID_CLASS);\r\n                }\r\n            }\r\n\r\n            if (opts === \"off\") {\r\n                field.nodeLink.classList.remove(AUTOFORM_FIELD_INVALID_CLASS);\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nlet autoforms = {\r\n    widgets: {}, // all widgets with inited autoform\r\n    init: function (htmlElementNode, options) {\r\n        if (htmlElementNode) {\r\n            let aufm = this,\r\n\r\n                newElementName = (htmlElementNode.className + htmlElementNode.id).toLowerCase().replace(new RegExp(\"[^[a-zA-Z0-9]]*\", \"g\"), \"_\");\r\n\r\n            if (!options) {\r\n                options = {};\r\n            }\r\n\r\n            let newAufmWidget = htmlElementNode.autoform = aufm.widgets[newElementName] = new AutoForm(htmlElementNode, options);\r\n            newAufmWidget.initEvents();\r\n        } else {\r\n            console.error(\"Error: trying to init autoforms on undefined node\");\r\n        }\r\n    }\r\n};\r\n(function (root, factory) {\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define([], factory);\r\n    } else if (typeof module === \"object\" && module.exports) {\r\n        module.exports = factory;\r\n    } else {\r\n        root.returnExports = factory;\r\n    }\r\n}(this, autoforms));\r\n","module.exports = () => {\r\n  const header = document.querySelector(`.header--main`);\r\n\r\n  const DEFAULT_HEIGHT = header.offsetHeight;\r\n\r\n  if (header) {\r\n    window.addEventListener(`scroll`, () => {\r\n      console.log(window.pageYOffset);\r\n      if (header.offsetHeight >= 130) {\r\n        header.style.height = `${DEFAULT_HEIGHT - window.pageYOffset}px`;\r\n      }\r\n      if (header.offsetHeight === 130) {\r\n        header.classList.add(`header--sticky`);\r\n      } else {\r\n        header.classList.remove(`header--sticky`);\r\n      }\r\n    });\r\n  }\r\n};\r\n","/*\r\n\t:: popup 1.0 ::\r\n\r\nПринимает:\r\n\topenTag - тег кнопки открытия\r\n\tcloseTag - тег кнопки закрытия\r\n\trootClass (опционально) - класс для rootEl. По умолчанию is-popup-open\r\n\trootTag (опционально) - в чем искать. По умолчанию body\r\n\r\nДействие: при нажатии на кнопки openTag/closeTag убирает/добавляет rootClass у rootEl\r\n\r\nПодключение:\r\n\r\n// попап\r\nconst popup = require(\"./popup\");\r\n\r\n// попап\r\npopup ({\r\n\topenTag: \".js-popup-open\",\r\n\tcloseTag: \".js-popup-close\",\r\n\trootClass: \"is-popup-open\",\r\n\trootTag: \"body\"\r\n});\r\n\r\n*/\r\n\r\nmodule.exports = () => {\r\n  const ACTIVE_CLASS = `show`\r\n  const BODY_OVERFLOW_CLASS = `overflow-h`\r\n\r\n  const popupElement = document.querySelector(`.js-popup`);\r\n  if (popupElement) {\r\n    const openPopupButtonElement = document.querySelector(`.js-open-popup`);\r\n    const closePopupButtonElement = popupElement.querySelector(`.js-close-popup`);\r\n\r\n    const closePopup = (evt) => {\r\n      evt.preventDefault()\r\n      document.body.classList.remove(BODY_OVERFLOW_CLASS)\r\n      popupElement.classList.remove(ACTIVE_CLASS)\r\n\r\n      closePopupButtonElement.removeEventListener(`click`, closePopup)\r\n    }\r\n\r\n    const openPopup = (evt) => {\r\n      evt.preventDefault()\r\n      document.body.classList.add(BODY_OVERFLOW_CLASS)\r\n      popupElement.classList.add(ACTIVE_CLASS)\r\n\r\n      closePopupButtonElement.addEventListener(`click`, closePopup)\r\n    }\r\n\r\n    openPopupButtonElement.addEventListener(`click`, openPopup)\r\n  }\r\n};"]}